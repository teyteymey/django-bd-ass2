openapi: 3.0.2
info:
  title: 'Appvocado backend'
  version: ''
  description: "Some of the calls need to be done by a logged in user. First register in the service and then log in. If you have authorization problems by doing this, delete the cookies."
  
paths:
  /:
    get:
      summary: 'List endpoints in the API'
      operationId: listApiOverviews
      description: 'Lists all the endpoints of the API'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
              example:
                Clear database: "/deletedb    #clears all the data in the database"
                Create an account: "/register    #registers a new user"
                Login: "/login    #login to be authorised"
                Logout: "/logout"
                ...: "..."
          description: ''
          
      tags:
      - ''
  /deletedb/:
    get:
      operationId: listclearDBs
      description: 'Deletes the Offers, Users, Categories and Reservations of the database. It is useful for debugging'
      parameters: []
      responses:
        '204':
          description: 'No content'
      tags:
      - deletedb
  /user/:
    get:
      summary: 'List logged user details'
      operationId: listUserDetails
      description: 'List the details of the user logged in.'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                objectExample:
                    $ref: '#/components/examples/simple_user'
          description: ''
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      tags:
      - user
      security:
        - bearerAuth: []
    
    put:
      summary: 'Edit details of user'
      description: 'You do not need to put the username as it takes the user from the request. Specify the values of the attributes to change. You need to put the old values too, but the Flutter app will do this automatically'
      operationId: updateUserDetail
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      - name: first_name
        in: query
        required: true
        schema:
          type: string
      - name: last_name
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:    # Media type
            schema:            # Request body contents
              $ref: '#/components/schemas/User'   # Reference to an object
            example:
              email: changemyemail@gmail.com
              first_name: Marta
              last_name: Smith
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                objectExample:
                    $ref: '#/components/examples/edited_simple_user'
          description: 'OK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      tags:
      - user
      security:
        - bearerAuth: []
        
    delete:
      summary: 'Delete my account'
      operationId: destroyUserDetail
      description: 'Deletes the account of the logged in user'
      responses:
        '204':
          description: 'No content'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      tags:
      - user
      security:
        - bearerAuth: []

  /user/{id}:
    
    get:
      summary: 'Get the details of another user'
      operationId: retrieveFriendDetail
      description: 'Allows the user to see the basic details of another user in the system.'
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                objectExample:
                    $ref: '#/components/examples/simple_user'
          description: 'OK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: 'Bad request'
          content:
            application/json:
              example:
                Message: "This user does not exist."
      tags:
      - user
      security:
        - bearerAuth: []
        
  /reservations/:
    get:
      operationId: listReservations
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - reservations
    post:
      operationId: createReservationList
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - reservations
  /offers/:
    get:
      operationId: listOffers
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - offers
    post:
      operationId: createOfferList
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - offers
  /offers/{id}:
    get:
      operationId: retrieveOfferDetails
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - offers
  /categories/:
    get:
      operationId: listCategorys
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - categories
    post:
      operationId: createCategoryList
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - categories
  /categories/{id}:
    get:
      operationId: retrieveCategoryDetails
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - categories
  /user/requests:
    get:
      operationId: listOfferRequests
      summary: 'See all requests of the logged user'
      description: 'Lists all the requests a user has recieved of their products'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfReservations'
          description: 'OK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      tags:
      - user
      security:
        - bearerAuth: []
        
  /user/requests/{id}:
    get:
      operationId: retrieveviewRequest
      summary: 'See details of a request'
      description: 'The user sees the information of one specific request made for one of its offers. The offer is the one identified with the id specified in the path.'
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: 'OK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: 'Not found'
          content:
            application/json:
              example:
                Message: "This request does not belong to you or does not exist."
      tags:
      - user
      security:
        - bearerAuth: []
        
    put:
      operationId: updateviewRequest
      summary: 'Edit one of the requests for my offer -> Accept the offer'
      description: 'Permits to edit a request of an offer of the logged user. Primarily it is used to accept it. The offer is the one identified with the id specified in the path.'
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: accepted
        in: query
        required: true
        description: 'New value of the accepted attribute of the reservation identified by the id of the path.'
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
            example:
              accepted: True
            
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: 'OK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: 'Not found'
          content:
            application/json:
              example:
                Message: "This request does not belong to you or does not exist."
      tags:
      - user
      security:
      
        - bearerAuth: []
  /user/offers:
    get:
      summary: 'Get offers from the logged user'
      operationId: listmyOffers
      description: 'Returns an array of the offers posted by the logged user.'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfOffers'
          description: 'OK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      tags:
      - user
      security:
        - bearerAuth: []
  /user/friends:
    get:
      operationId: listmyFriends
      description: 'Returns an array of the friends of the logged user.'
      summary: 'Array of friends of the logged user'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfFriends'
          description: 'OK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      tags:
      - user
      security:
        - bearerAuth: []
    post:
      operationId: createmyFriends
      description: 'Allows to add a new friend.'
      summary: 'Add a new friend'
      parameters:
      - name: user_id_2
        in: query
        required: true
        description: 'The id of the user we want to add as friend'
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Friends'
            example:
              user_id_2: 2
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'
        '409':
          description: 'Conflict'
          content:
            application/json:
              example:
                Message: "You already are friends."
        '400':
          description: 'Bad request'
          content:
            application/json:
              example:
                Message: "You can not add yourself as a friend."
      tags:
      - user
  /user/favorite_offers:
    get:
      operationId: listfavoriteOffers
      description: 'Lists the favorite offers of the logged user.'
      summary: 'List the favorite offers'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfFriends'
          description: 'OK'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      tags:
      - user
      security:
        - bearerAuth: []
    post:
      operationId: createfavoriteOffers
      description: 'Adds a new offer as favorite to the logged in user.'
      summary: ' Set offer as favorite.'
      parameters:
      - name: offer_id
        in: query
        required: true
        description: 'The id of the offer we want to add as favorite.'
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteOffers'
            example:
              offer_id: 2
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteOffers'
        '409':
          description: 'Conflict'
          content:
            application/json:
              example:
                Message: "You already favorited this item."
        '400':
          description: 'Bad request'
          content:
            application/json:
              example:
                Message: "The offer does not exist."
      tags:
      - user
  /register/:
    post:
      operationId: createCustomRegister
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegister'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRegister'
          description: ''
      tags:
      - register
  /login/:
    post:
      operationId: createLogin
      description: 'Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework
        Accept the following POST parameters: username, password
        Return the REST Framework Token Object''s key.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'   # Reference to an object
              example: 
                # Properties of the referenced object
                non_field_errors: "Unable to log in with provided credentials."
      tags:
      - login
  /reset_pass/:
    post:
      operationId: createPasswordChange
      description: 'Calls Django Auth SetPasswordForm save method.
        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
      tags:
      - reset-pass
  /logout/:
    get:
      operationId: listLogouts
      description: 'Calls Django logout method and delete the Token object
        assigned to the current User object.
        Accepts/Returns nothing.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - logout
    post:
      operationId: createLogout
      description: 'Calls Django logout method and delete the Token object
        assigned to the current User object.
        Accepts/Returns nothing.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - logout
      
components:
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          example:
            detail: "Authentication credentials were not provided."
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  examples:
    simple_user:
      value:
        username: marta01
        email: marta01@gmail.com
        first_name: Marta
        last_name: Smith
    edited_simple_user:
      value:
        username: marta01
        email: changemyemail@gmail.com
        first_name: Marta
        last_name: Smith
  schemas:
    ArrayOfReservations:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          user_id:
            type: integer
          offer_id:
            type: integer
          accepted:
            type: boolean
      example:
        - id: 10
          user_id: 30
          offer_id: 25
          accepted: false
        - id: 10
          user_id: 30
          offer_id: 25
          accepted: true
    ArrayOfOffers:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          category_id:
            type: integer
          user_id:
            type: integer
          title:
            type: string
          description:
            type: string
          image:
            type: string
            format: url
          closed:
            type: boolean
          end_date:
            type: string
            format: date-time
          created_at:
            type: string
            format: date-time
          closed_at:
            type: string
            format: date-time
      example:
        - id: 10
          category_id: 2
          user_id: 25
          title: 'Half a kg of avocados'
          description: 'They are still good. Bought too many!'
          image:  '/static/media/images/106388a52a51920d5a0e6b808ca1a7f1.jpg'
          closed: false
          end_date: "2022-02-22"
          created_at: "2022-01-22"
          closed_at: null
        - id: 11
          category_id: 2
          user_id: 25
          title: 'Half a kg of lemons'
          description: 'They are still good. Bought too many!'
          image:  '/static/media/images/Citrus_limon_Rutaceae.jpg'
          closed: false
          end_date: "2022-02-22"
          created_at: "2022-01-22"
          closed_at: null
    ArrayOfFriends:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          user_id_1:
            type: integer
          user_id_2:
            type: integer
      example:
        - id: 1
          user_id_1: 2
          user_id_2: 1
        - id: 2
          user_id_1: 2
          user_id_2: 4
    Friends:
      type: object
      properties:
          id:
            type: integer
            example: 1
          user_id_1:
            type: integer
            example: 1
          user_id_2:
            type: integer
            example: 2
      required:
        - user_id_2
    Offer:
      type: object
      properties:
        id:
          type: integer
        category_id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        description:
          type: string
        image:
          type: string
          format: url
        closed:
          type: boolean
        end_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        closed_at:
          type: string
          format: date-time
      required:
        - category_id
        - title
        - description
        - image
        - end_date
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string
    Reservation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 25
        offer_id:
          type: integer
          example: 125
        accepted:
          type: boolean
          example: true
      required:
      - offer_id
    Category:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        image:
          type: string
          format: url
      required:
      - title
      - description
      - image
    UserReview:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        reviewer_id:
          type: integer
        rating:
          type: integer
          minimum: 0
          maximum: 10
      required:
      - reviewer_id
      - rating
    FavoriteOffers:
      type: object
      properties:
        id:
          type: integer
          example: 2
        offer_id:
          type: integer
          example: 5
        user_id:
          type: integer
          example: 4
      required:
      - offer_id
    CustomRegister:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        first_name:
          type: string
        last_name:
          type: string
      required:
      - username
      - password1
      - password2
      - first_name
      - last_name
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - username
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2